package Arvore;

public class Metodos<T> {
    private No<T> raiz;
    private int qntd = 0;

    public int getQntd() {
        return qntd;
    }

    public void setQntd(int qntd) {
        this.qntd = qntd;
    }

    public No<T> getRaiz() {
        return raiz;
    }

    public void setRaiz(No<T> raiz) {
        this.raiz = raiz;
    }

    public void inserir(int id, T dados) {
        No<T> novoNo = new No<>(id, dados);

        if (getRaiz() == null) {
            setRaiz(novoNo);
        } else {
            inserirRec(getRaiz(), novoNo);
        }
        qntd++;
    }

    private void inserirRec(No<T> atualNo, No<T> novoNo) {
        if (novoNo.getId() < atualNo.getId()) {
            if (atualNo.getEsq() == null) {
                atualNo.setEsq(novoNo);
            } else {
                inserirRec(atualNo.getEsq(), novoNo);
            }
        } else {
            if (atualNo.getDir() == null) {
                atualNo.setDir(novoNo);
            } else {
                inserirRec(atualNo.getDir(), novoNo);
            }
        }
    }

    public void removerNo(int id) {
        No<T> alvo = busca(getRaiz(), id);
        if (alvo == null) {
            System.out.println("Nó com ID " + id + " não encontrado.");
            return;
        }

        // Encontrar o pai do nó alvo
        No<T> pai = null;
        No<T> atual = getRaiz();

        while (atual != null && atual != alvo) {
            pai = atual;
            if (id < atual.getId()) {
                atual = atual.getEsq();
            } else {
                atual = atual.getDir();
            }
        }

        // Agora temos 'alvo' (o nó a ser removido) e 'pai' (seu pai)
        // Segue a lógica de remoção

        if (alvo.getEsq() == null && alvo.getDir() == null) {
            // Caso 1: alvo é um nó folha
            if (pai == null) {
                // alvo é a raiz
                setRaiz(null);
            } else if (pai.getEsq() == alvo) {
                pai.setEsq(null);
            } else {
                pai.setDir(null);
            }
        } else if (alvo.getEsq() == null || alvo.getDir() == null) {
            // Caso 2: alvo tem apenas um filho
            No<T> filho = (alvo.getEsq() != null) ? alvo.getEsq() : alvo.getDir();

            if (pai == null) {
                // alvo é a raiz
                setRaiz(filho);
            } else if (pai.getEsq() == alvo) {
                pai.setEsq(filho);
            } else {
                pai.setDir(filho);
            }
        } else {
            // Caso 3: alvo tem dois filhos
            // Encontrar o sucessor (menor nó da subárvore da direita)
            No<T> paiSucessor = alvo;
            No<T> sucessor = alvo.getDir();

            while (sucessor.getEsq() != null) {
                paiSucessor = sucessor;
                sucessor = sucessor.getEsq();
            }

            // Copiar os dados do sucessor para o alvo
            alvo.setId(sucessor.getId());
            alvo.setDados(sucessor.getDados());

            // Remover o sucessor da sua posição original
            if (paiSucessor.getEsq() == sucessor) {
                paiSucessor.setEsq(sucessor.getDir());
            } else {
                paiSucessor.setDir(sucessor.getDir());
            }
        }

        qntd--;
    }

	
	    private No<T> busca(No<T> raiz, int chave) {
	        if (raiz == null || raiz.getId() == chave) {
	            return raiz;
	        } else if (raiz.getId() > chave) {
	            return busca(raiz.getEsq(), chave);
	        } else {
	            return busca(raiz.getDir(), chave);
	        }
	    }
	}

